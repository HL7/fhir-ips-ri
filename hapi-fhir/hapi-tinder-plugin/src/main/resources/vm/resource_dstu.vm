#parse ( "/vm/templates_dstu.vm" )

package ${packageBase}.resource;


import java.util.*;
import ca.uhn.fhir.model.api.*;
import ca.uhn.fhir.model.api.annotation.*;
import ca.uhn.fhir.rest.gclient.*;

#foreach ( $import in $imports )
import ${import};
#end

##import ${packageBase}.composite.*;
##import ${packageBase}.valueset.*;

/**
 * HAPI/FHIR <b>${elementName}</b> Resource
 * (${shortName})
 *
 * <p>
 * <b>Definition:</b>
 * ${definition}
 * </p> 
 *
 * <p>
 * <b>Requirements:</b>
 * ${requirements}
 * </p> 
 *
#if (${profile} != "")
 * <p>
 * <b>Profile Definition:</b>
 * <a href="${profile}">${profile}</a> 
 * </p>
 *
#end
 */
@ResourceDef(name="${elementName}", profile="${profile}", id="${id}")
public class ${className} extends ca.uhn.fhir.model.${version}.resource.BaseResource
    implements #{if}( ${className}=="OperationOutcome" || ${className}=="Conformance" || ${className}=="SecurityEvent" ) ca.uhn.fhir.model.base.resource.Base${className} #{else} IResource #{end} 
    {

#foreach ( $param in $searchParams )
	/**
	 * Search parameter constant for <b>$esc.html(${param.name})</b>
	 * <p>
	 * Description: <b>$esc.html(${param.description})</b><br>
	 * Type: <b>$esc.html(${param.type})</b><br>
	 * Path: <b>$esc.html(${param.path})</b><br>
	 * </p>
	 */
	@SearchParamDefinition(name="${param.name}", path="${param.path}", description="${param.description}", type="${param.type}" #{if}($param.compositeOf.empty == false) , compositeOf={ #{foreach}($compositeOf in $param.compositeOf) "${compositeOf}"#{if}($foreach.hasNext), #{end}#{end} } #{end} )
	public static final String $param.constantName = "${param.name}";

	/**
	 * <b>Fluent Client</b> search parameter constant for <b>$esc.html(${param.name})</b>
	 * <p>
	 * Description: <b>$esc.html(${param.description})</b><br>
	 * Type: <b>$esc.html(${param.type})</b><br>
	 * Path: <b>$esc.html(${param.path})</b><br>
	 * </p>
	 */
#if( ${param.typeCapitalized} == 'Composite' )
	public static final CompositeClientParam<${param.compositeTypes[0]}ClientParam, ${param.compositeTypes[1]}ClientParam> ${param.fluentConstantName} = new CompositeClientParam<${param.compositeTypes[0]}ClientParam, ${param.compositeTypes[1]}ClientParam>(${param.constantName});
#else
	public static final ${param.typeCapitalized}ClientParam ${param.fluentConstantName} = new ${param.typeCapitalized}ClientParam(${param.constantName});
#end

#if( ${param.typeCapitalized} == 'Reference' )
#foreach ( $include in $param.paths )
	/**
	 * Constant for fluent queries to be used to add include statements. Specifies
	 * the path value of "<b>${include.path}</b>".
	 */
	public static final Include INCLUDE_${include.includeName} = new Include("${include.path}");

#end	
#end
#end

#childExtensionFields( $childExtensionTypes )
#childVars( $children )
#childAccessors( $children )
#childResourceBlocks($resourceBlockChildren)

#childExtensionTypes( $childExtensionTypes )

    @Override
    public String getResourceName() {
        return "${className.replaceAll("Resource", "")}";
    }

    public ca.uhn.fhir.context.FhirVersionEnum getStructureFhirVersionEnum() {
    	return ca.uhn.fhir.context.FhirVersionEnum.${versionEnumName};
    }

}
